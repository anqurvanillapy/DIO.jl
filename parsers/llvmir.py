# This file is automatically generated by RBNF.hs
#token=. {idint:int, colomn:int, lineno:int, val:str, name:str}
#ast=. {}
#linkedlist=a. {}
#tokens=. {offset:int}
#prim__eq::forall a. (a * a) -> bool
#prim__not__eq::forall a. (a * a) -> bool
#prim__null::forall a. a
#prim__peekable::(tokens * int) -> bool
#prim__peek::(tokens * int) -> token
#prim__mv__forward::tokens -> token
#prim__match__tk::(tokens * int) -> bool * any
#prim__tk__id::str -> int
#prim__reset::(tokens * int) -> ()
#prim__cons::forall a. (a * linkedlist a) -> linkedlist a
#prim__nil::forall a. linkedlist a
#prim__to__errs::any -> linkedlist (int * str)
#prim__to__result::any -> ast
#prim__to__any::forall a. a -> any
#prim__mk__ast::forall a. (str * a) -> ast
#prim__is__null::forall a. a -> bool
#prim__is__not__null::forall a. a -> bool
#always__true::bool
def lr_step_BasicBlockList(_slot_0, prim__state, prim__tokens):
    lcl_0 = parse_BasicBlock(prim__state, prim__tokens)
    _slot_1_check = lcl_0
    lcl_0 = _slot_1_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_1_check
    else:
        lcl_0 = _slot_1_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_1 = lcl_0
        lcl_0 = (_slot_0, _slot_1)
        lcl_0 = prim__mk__ast("BasicBlockList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def lr_loop_BasicBlockList(_slot_0, prim__state, prim__tokens):
    lr_BasicBlockList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_BasicBlockList(lr_BasicBlockList_reduce, prim__state, prim__tokens)
    lr_BasicBlockList_try = lcl_0
    lcl_0 = lr_BasicBlockList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_BasicBlockList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_BasicBlockList_reduce = lcl_0
        lcl_0 = lr_step_BasicBlockList(lr_BasicBlockList_reduce, prim__state, prim__tokens)
        lr_BasicBlockList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_BasicBlockList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_BasicBlockList_reduce
def lr_step_GEPConstIndexList(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_GEPConstIndex(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_1 = _slot_2_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_2 = lcl_1
            lcl_1 = (_slot_0, _slot_1, _slot_2)
            lcl_1 = prim__mk__ast("GEPConstIndexList", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def lr_loop_GEPConstIndexList(_slot_0, prim__state, prim__tokens):
    lr_GEPConstIndexList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_GEPConstIndexList(lr_GEPConstIndexList_reduce, prim__state, prim__tokens)
    lr_GEPConstIndexList_try = lcl_0
    lcl_0 = lr_GEPConstIndexList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_GEPConstIndexList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_GEPConstIndexList_reduce = lcl_0
        lcl_0 = lr_step_GEPConstIndexList(lr_GEPConstIndexList_reduce, prim__state, prim__tokens)
        lr_GEPConstIndexList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_GEPConstIndexList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_GEPConstIndexList_reduce
def lr_step_IndexList(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_IntLit(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_1 = _slot_2_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_2 = lcl_1
            lcl_1 = (_slot_0, _slot_1, _slot_2)
            lcl_1 = prim__mk__ast("IndexList", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def lr_loop_IndexList(_slot_0, prim__state, prim__tokens):
    lr_IndexList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_IndexList(lr_IndexList_reduce, prim__state, prim__tokens)
    lr_IndexList_try = lcl_0
    lcl_0 = lr_IndexList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_IndexList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_IndexList_reduce = lcl_0
        lcl_0 = lr_step_IndexList(lr_IndexList_reduce, prim__state, prim__tokens)
        lr_IndexList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_IndexList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_IndexList_reduce
def lr_step_OverflowFlags(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote nuw"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_1 = lcl_2
            lcl_2 = (_slot_0, _slot_1)
            lcl_2 = prim__mk__ast("OverflowFlags", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nsw"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_1 = lcl_2
            lcl_2 = (_slot_0, _slot_1)
            lcl_2 = prim__mk__ast("OverflowFlags", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "OverflowFlags lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "OverflowFlags got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def lr_loop_OverflowFlags(_slot_0, prim__state, prim__tokens):
    lr_OverflowFlags_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_OverflowFlags(lr_OverflowFlags_reduce, prim__state, prim__tokens)
    lr_OverflowFlags_try = lcl_0
    lcl_0 = lr_OverflowFlags_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_OverflowFlags_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_OverflowFlags_reduce = lcl_0
        lcl_0 = lr_step_OverflowFlags(lr_OverflowFlags_reduce, prim__state, prim__tokens)
        lr_OverflowFlags_try = lcl_0
        # recalculate condition
        lcl_0 = lr_OverflowFlags_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_OverflowFlags_reduce
def lr_step_ParamAttrList(_slot_0, prim__state, prim__tokens):
    lcl_0 = parse_ParamAttr(prim__state, prim__tokens)
    _slot_1_check = lcl_0
    lcl_0 = _slot_1_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_1_check
    else:
        lcl_0 = _slot_1_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_1 = lcl_0
        lcl_0 = (_slot_0, _slot_1)
        lcl_0 = prim__mk__ast("ParamAttrList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def lr_loop_ParamAttrList(_slot_0, prim__state, prim__tokens):
    lr_ParamAttrList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_ParamAttrList(lr_ParamAttrList_reduce, prim__state, prim__tokens)
    lr_ParamAttrList_try = lcl_0
    lcl_0 = lr_ParamAttrList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_ParamAttrList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_ParamAttrList_reduce = lcl_0
        lcl_0 = lr_step_ParamAttrList(lr_ParamAttrList_reduce, prim__state, prim__tokens)
        lr_ParamAttrList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_ParamAttrList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_ParamAttrList_reduce
def lr_step_ParamList(_slot_0, prim__state, prim__tokens):
    lcl_0 = parse_Param(prim__state, prim__tokens)
    _slot_1_check = lcl_0
    lcl_0 = _slot_1_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_1_check
    else:
        lcl_0 = _slot_1_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_1 = lcl_0
        lcl_0 = (_slot_0, _slot_1)
        lcl_0 = prim__mk__ast("ParamList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def lr_loop_ParamList(_slot_0, prim__state, prim__tokens):
    lr_ParamList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_ParamList(lr_ParamList_reduce, prim__state, prim__tokens)
    lr_ParamList_try = lcl_0
    lcl_0 = lr_ParamList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_ParamList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_ParamList_reduce = lcl_0
        lcl_0 = lr_step_ParamList(lr_ParamList_reduce, prim__state, prim__tokens)
        lr_ParamList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_ParamList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_ParamList_reduce
def lr_step_SepTypeValueList(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0, _slot_1)
        _slot_local__1 = lcl_0
        lcl_0 = parse_TypeValue(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_0 = _slot_2_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_2 = lcl_0
            lcl_0 = (_slot_local__1, _slot_2)
            lcl_0 = prim__mk__ast("SepTypeValueList", lcl_0)
            _slot_local__2 = lcl_0
            lcl_0 = (True, _slot_local__2)
    return lcl_0
def lr_loop_SepTypeValueList(_slot_0, prim__state, prim__tokens):
    lr_SepTypeValueList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_SepTypeValueList(lr_SepTypeValueList_reduce, prim__state, prim__tokens)
    lr_SepTypeValueList_try = lcl_0
    lcl_0 = lr_SepTypeValueList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_SepTypeValueList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_SepTypeValueList_reduce = lcl_0
        lcl_0 = lr_step_SepTypeValueList(lr_SepTypeValueList_reduce, prim__state, prim__tokens)
        lr_SepTypeValueList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_SepTypeValueList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_SepTypeValueList_reduce
def lr_step_Type(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote addrspace"):
            lcl_2 = parse_AddrSpace(prim__state, prim__tokens)
            _slot_1_check = lcl_2
            lcl_2 = _slot_1_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_1 = lcl_2
                lcl_2 = prim__tk__id("quote *")
                lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__is__null(_slot_2)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote * not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1, _slot_2)
                    lcl_2 = prim__mk__ast("PtrType", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = (_slot_local__2,)
                    lcl_2 = prim__mk__ast("Type", lcl_2)
                    _slot_local__3 = lcl_2
                    lcl_2 = (True, _slot_local__3)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote *"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_1 = lcl_2
            lcl_2 = (_slot_0, _slot_1)
            lcl_2 = prim__mk__ast("PtrType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (_slot_local__1,)
            lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
            _slot_local__2 = lcl_2
            lcl_2 = (_slot_local__2,)
            lcl_2 = prim__mk__ast("Type", lcl_2)
            _slot_local__3 = lcl_2
            lcl_2 = (True, _slot_local__3)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ("):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_1 = lcl_2
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__peekable(prim__tokens, 0)
            if lcl_2:
                # switch
                lcl_3 = prim__peek(prim__tokens, 0)
                lcl_3 = lcl_3.idint
                if lcl_3 == prim__tk__id("quote {"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote void"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote label"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i8"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i64"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i32"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i16"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i1"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote f64"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote f32"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote ["):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote ..."):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote )"):
                    lcl_3 = prim__mv__forward(prim__tokens)
                    _slot_2 = lcl_3
                    lcl_3 = (_slot_0, _slot_1, _slot_2)
                    lcl_3 = prim__mk__ast("FuncType", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (_slot_local__1,)
                    lcl_3 = prim__mk__ast("Type", lcl_3)
                    _slot_local__2 = lcl_3
                    lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("localIdent"):
                    lcl_3 = parse_Params(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("FuncType", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (_slot_local__1,)
                            lcl_3 = prim__mk__ast("Type", lcl_3)
                            _slot_local__2 = lcl_3
                            lcl_3 = (True, _slot_local__2)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Type lookahead failed")
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_3)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            else:
                lcl_2 = (_off_1, "Type got EOF")
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = prim__to__any(lcl_2)
                lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Type lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Type got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def lr_loop_Type(_slot_0, prim__state, prim__tokens):
    lr_Type_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_Type(lr_Type_reduce, prim__state, prim__tokens)
    lr_Type_try = lcl_0
    lcl_0 = lr_Type_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_Type_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_Type_reduce = lcl_0
        lcl_0 = lr_step_Type(lr_Type_reduce, prim__state, prim__tokens)
        lr_Type_try = lcl_0
        # recalculate condition
        lcl_0 = lr_Type_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_Type_reduce
def lr_step_TypeConstList(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_1 = _slot_2_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_2 = lcl_1
            lcl_1 = (_slot_0, _slot_1, _slot_2)
            lcl_1 = prim__mk__ast("TypeConstList", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def lr_loop_TypeConstList(_slot_0, prim__state, prim__tokens):
    lr_TypeConstList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_TypeConstList(lr_TypeConstList_reduce, prim__state, prim__tokens)
    lr_TypeConstList_try = lcl_0
    lcl_0 = lr_TypeConstList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_TypeConstList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_TypeConstList_reduce = lcl_0
        lcl_0 = lr_step_TypeConstList(lr_TypeConstList_reduce, prim__state, prim__tokens)
        lr_TypeConstList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_TypeConstList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_TypeConstList_reduce
def lr_step_TypeList(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_1 = _slot_2_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_2 = lcl_1
            lcl_1 = (_slot_0, _slot_1, _slot_2)
            lcl_1 = prim__mk__ast("TypeList", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def lr_loop_TypeList(_slot_0, prim__state, prim__tokens):
    lr_TypeList_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_TypeList(lr_TypeList_reduce, prim__state, prim__tokens)
    lr_TypeList_try = lcl_0
    lcl_0 = lr_TypeList_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_TypeList_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_TypeList_reduce = lcl_0
        lcl_0 = lr_step_TypeList(lr_TypeList_reduce, prim__state, prim__tokens)
        lr_TypeList_try = lcl_0
        # recalculate condition
        lcl_0 = lr_TypeList_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_TypeList_reduce
def parse_AddrSpace(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote addrspace")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote addrspace not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote (")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote ( not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_IntLit(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__tk__id("quote )")
                lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                _slot_3 = lcl_2
                lcl_2 = prim__is__null(_slot_3)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote ) not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                    lcl_2 = prim__mk__ast("AddrSpace", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_Alignment(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote align")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote align not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_IntLit(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast("Alignment", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_ArrayConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote [")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote [ not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote {"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote void"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote label"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i8"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i64"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i32"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i16"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i1"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f64"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f32"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ]"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_1 = (_slot_0, _slot_1)
                lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ["):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ]")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ] not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("ArrayConst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "ArrayConst lookahead failed")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "ArrayConst got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_ArrayType(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote [")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote [ not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_IntLit(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote x")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote x not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = prim__tk__id("quote ]")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_4 = lcl_2
                    lcl_2 = prim__is__null(_slot_4)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote ] not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                        lcl_2 = prim__mk__ast("ArrayType", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_BasicBlock(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote store"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ret"):
            lcl_2 = parse_Terminator(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("BasicBlock", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_InstructionList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("BasicBlock", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("identifier"):
            lcl_2 = parse_name(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote xor"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote urem"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote udiv"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote sub"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote store"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote srem"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote shl"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote sdiv"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote ret"):
                        lcl_5 = parse_Terminator(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote or"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote mul"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote lshr"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote insertvalue"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote getelementptr"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote fsub"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote frem"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote fmul"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote fadd"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote extractvalue"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote ashr"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote and"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote add"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_5 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_5, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = prim__to__result(lcl_6)
                            _slot_1 = lcl_6
                            lcl_6 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = prim__eq(lcl_6, False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_6 = _slot_2_check[1]
                                lcl_6 = prim__to__result(lcl_6)
                                _slot_2 = lcl_6
                                lcl_6 = (_slot_0, _slot_1, _slot_2)
                                lcl_6 = prim__mk__ast("BasicBlock", lcl_6)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("localIdent"):
                        lcl_5 = parse_InstructionList(prim__state, prim__tokens)
                        _slot_1_check = lcl_5
                        lcl_6 = _slot_1_check[0]
                        lcl_5 = prim__eq(lcl_6, False)
                        if lcl_5:
                            lcl_5 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_1 = lcl_5
                            lcl_5 = parse_Terminator(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = prim__eq(lcl_5, False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = prim__to__result(lcl_5)
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast("BasicBlock", lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_off_1, "BasicBlock lookahead failed")
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = prim__to__any(lcl_5)
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "BasicBlock got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "BasicBlock lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "BasicBlock got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_BasicBlockList(prim__state, prim__tokens):
    lcl_0 = parse_BasicBlock(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("BasicBlockList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_BasicBlockList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_BinInst(prim__state, prim__tokens):
    lcl_0 = parse_BinOp(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = parse_BinOpQualifier(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_1 = lcl_0
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = prim__eq(lcl_0, False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = prim__to__result(lcl_0)
                _slot_2 = lcl_0
                lcl_0 = prim__tk__id("quote ,")
                lcl_0 = prim__match__tk(prim__tokens, lcl_0)
                _slot_3 = lcl_0
                lcl_0 = prim__is__null(_slot_3)
                if lcl_0:
                    lcl_0 = prim__tokens.offset
                    lcl_0 = (lcl_0, "quote , not match")
                    lcl_0 = prim__cons(lcl_0, prim__nil)
                    lcl_0 = prim__to__any(lcl_0)
                    lcl_0 = (False, lcl_0)
                else:
                    lcl_0 = parse_Value(prim__state, prim__tokens)
                    _slot_4_check = lcl_0
                    lcl_0 = _slot_4_check[0]
                    lcl_0 = prim__eq(lcl_0, False)
                    if lcl_0:
                        lcl_0 = _slot_4_check
                    else:
                        lcl_1 = _slot_4_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_4 = lcl_1
                        lcl_1 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                        lcl_1 = prim__mk__ast("BinInst", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
    return lcl_0
def parse_BinOp(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOp", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "BinOp lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "BinOp got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_BinOpQualifier(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote nuw"):
            lcl_2 = parse_OverflowFlags(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("BinOpQualifier", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nsw"):
            lcl_2 = parse_OverflowFlags(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("BinOpQualifier", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote exact"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_3 = (_slot_0,)
            lcl_2 = prim__mk__ast("BinOpQualifier", lcl_3)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "BinOpQualifier lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "BinOpQualifier got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_BitCastExpr(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote bitcast")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote bitcast not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote (")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote ( not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__tk__id("quote to")
                lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                _slot_3 = lcl_2
                lcl_2 = prim__is__null(_slot_3)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote to not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_4_check = lcl_2
                    lcl_2 = _slot_4_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_4_check
                    else:
                        lcl_3 = _slot_4_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_4 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_5 = lcl_3
                        lcl_3 = prim__is__null(_slot_5)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                            lcl_3 = prim__mk__ast("BitCastExpr", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_BlockAddressConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote blockaddress")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote blockaddress not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote (")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote ( not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_GlobalName(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__tk__id("quote ,")
                lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                _slot_3 = lcl_2
                lcl_2 = prim__is__null(_slot_3)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote , not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = parse_LocalName(prim__state, prim__tokens)
                    _slot_4_check = lcl_2
                    lcl_2 = _slot_4_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_4_check
                    else:
                        lcl_3 = _slot_4_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_4 = lcl_3
                        lcl_3 = prim__tk__id("quote )")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_5 = lcl_3
                        lcl_3 = prim__is__null(_slot_5)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote ) not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                            lcl_3 = prim__mk__ast("BlockAddressConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_BoolConst(prim__state, prim__tokens):
    lcl_0 = parse_BoolLit(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("BoolConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_BoolLit(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote true"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BoolLit", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote false"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("BoolLit", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "BoolLit lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "BoolLit got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_CharArrayConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote c")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote c not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_StrLit(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast("CharArrayConst", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_Constant(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote {"):
            lcl_2 = parse_StructConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote zeroinitializer"):
            lcl_2 = parse_ZeroInitializerConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote undef"):
            lcl_2 = parse_UndefConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote true"):
            lcl_2 = parse_BoolConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote null"):
            lcl_2 = parse_NullConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote none"):
            lcl_2 = parse_NoneConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote false"):
            lcl_2 = parse_BoolConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote c"):
            lcl_2 = parse_CharArrayConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote blockaddress"):
            lcl_2 = parse_BlockAddressConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote bitcast"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ["):
            lcl_2 = parse_ArrayConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote <"):
            lcl_2 = parse_StructConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("int"):
            lcl_2 = parse_IntConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("globalIdent"):
            lcl_2 = parse_GlobalName(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Constant", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("float"):
            lcl_2 = parse_FloatConst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Constant", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Constant lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Constant got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_ConstantExpr(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_InsValExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_GEPExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_ExtValExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote bitcast"):
            lcl_2 = parse_BitCastExpr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("ConstantExpr", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_BinOp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("ConstantExpr", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "ConstantExpr lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "ConstantExpr got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_ConstantOperand2(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote (")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote ( not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote ,")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote , not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = parse_Constant(prim__state, prim__tokens)
                    _slot_4_check = lcl_2
                    lcl_2 = _slot_4_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_4_check
                    else:
                        lcl_2 = _slot_4_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_4 = lcl_2
                        lcl_2 = prim__tk__id("quote )")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_5 = lcl_2
                        lcl_2 = prim__is__null(_slot_5)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote ) not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                            lcl_2 = prim__mk__ast("ConstantOperand2", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_Dereferenceable(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote dereferenceable_or_null"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = prim__tk__id("quote (")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_1 = lcl_2
            lcl_2 = prim__is__null(_slot_1)
            if lcl_2:
                lcl_3 = prim__tokens.offset
                lcl_3 = (lcl_3, "quote ( not match")
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = prim__to__any(lcl_3)
                lcl_3 = (False, lcl_3)
                lcl_2 = lcl_3
            else:
                lcl_3 = parse_IntLit(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = prim__to__result(lcl_4)
                    _slot_2 = lcl_4
                    lcl_4 = prim__tk__id("quote )")
                    lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                    _slot_3 = lcl_4
                    lcl_4 = prim__is__null(_slot_3)
                    if lcl_4:
                        lcl_4 = prim__tokens.offset
                        lcl_4 = (lcl_4, "quote ) not match")
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = prim__to__any(lcl_4)
                        lcl_4 = (False, lcl_4)
                    else:
                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_4 = prim__mk__ast("Dereferenceable", lcl_4)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote dereferenceable"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_3 = prim__tk__id("quote (")
            lcl_2 = prim__match__tk(prim__tokens, lcl_3)
            _slot_1 = lcl_2
            lcl_2 = prim__is__null(_slot_1)
            if lcl_2:
                lcl_3 = prim__tokens.offset
                lcl_3 = (lcl_3, "quote ( not match")
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = prim__to__any(lcl_3)
                lcl_3 = (False, lcl_3)
                lcl_2 = lcl_3
            else:
                lcl_3 = parse_IntLit(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = prim__to__result(lcl_4)
                    _slot_2 = lcl_4
                    lcl_4 = prim__tk__id("quote )")
                    lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                    _slot_3 = lcl_4
                    lcl_4 = prim__is__null(_slot_3)
                    if lcl_4:
                        lcl_4 = prim__tokens.offset
                        lcl_4 = (lcl_4, "quote ) not match")
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = prim__to__any(lcl_4)
                        lcl_4 = (False, lcl_4)
                    else:
                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_4 = prim__mk__ast("Dereferenceable", lcl_4)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Dereferenceable lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Dereferenceable got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_ExtValExpr(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote extractvalue")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote extractvalue not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote (")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote ( not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_2 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_3 = lcl_4
                        lcl_4 = parse_IndexList(prim__state, prim__tokens)
                        _slot_4_check = lcl_4
                        lcl_4 = _slot_4_check[0]
                        lcl_4 = prim__eq(lcl_4, False)
                        if lcl_4:
                            lcl_4 = _slot_4_check
                        else:
                            lcl_5 = _slot_4_check[1]
                            lcl_5 = prim__to__result(lcl_5)
                            _slot_4 = lcl_5
                            lcl_5 = (_slot_3, _slot_4)
                            _slot_local__1 = lcl_5
                            lcl_5 = prim__tk__id("quote )")
                            lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                            _slot_5 = lcl_5
                            lcl_5 = prim__is__null(_slot_5)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, "quote ) not match")
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = prim__to__any(lcl_6)
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_local__1, _slot_5)
                                lcl_6 = prim__mk__ast("ExtValExpr", lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif lcl_4 == prim__tk__id("quote )"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_3 = lcl_4
                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_4 = prim__mk__ast("ExtValExpr", lcl_5)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_2, "ExtValExpr lookahead failed")
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = prim__to__any(lcl_4)
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_2, "ExtValExpr got EOF")
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_3)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_ExtValInst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote extractvalue")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote extractvalue not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_TypeValue(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote ,")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote , not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_IndexList(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                    lcl_2 = prim__mk__ast("ExtValInst", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_ExternLinkage(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote external"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ExternLinkage", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extern_weak"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ExternLinkage", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "ExternLinkage lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "ExternLinkage got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_FloatConst(prim__state, prim__tokens):
    lcl_0 = parse_FloatLit(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("FloatConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_FloatLit(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("float")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "float not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("FloatLit", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_FloatType(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote f64"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("FloatType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote f32"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("FloatType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "FloatType lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "FloatType got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_FunctionBody(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote {")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote { not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote }"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_1 = (_slot_0, _slot_1)
                lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote xor"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote urem"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote udiv"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote sub"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote store"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote srem"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote shl"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote sdiv"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ret"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote or"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote mul"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote lshr"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote insertvalue"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote getelementptr"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote fsub"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote frem"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote fmul"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote fadd"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote extractvalue"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ashr"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote and"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote add"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("identifier"):
                lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionBody", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "FunctionBody lookahead failed")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "FunctionBody got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_FunctionDecl(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote declare")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote declare not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote {"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote void"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote label"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i8"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i64"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i32"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i16"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i1"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f64"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f32"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote external"):
                lcl_1 = parse_ExternLinkage(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote extern_weak"):
                lcl_1 = parse_ExternLinkage(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ["):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast("FunctionDecl", lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("FunctionDecl", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "FunctionDecl lookahead failed")
                lcl_2 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_2)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "FunctionDecl got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_FunctionDef(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote define")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote define not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_FunctionHeader(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = parse_FunctionBody(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = prim__to__result(lcl_1)
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast("FunctionDef", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_FunctionHeader(prim__state, prim__tokens):
    lcl_0 = parse_Type(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = parse_GlobalName(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_1 = lcl_0
            lcl_0 = prim__tk__id("quote (")
            lcl_0 = prim__match__tk(prim__tokens, lcl_0)
            _slot_2 = lcl_0
            lcl_0 = prim__is__null(_slot_2)
            if lcl_0:
                lcl_0 = prim__tokens.offset
                lcl_0 = (lcl_0, "quote ( not match")
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = prim__to__any(lcl_0)
                lcl_0 = (False, lcl_0)
            else:
                lcl_0 = parse_Params(prim__state, prim__tokens)
                _slot_3_check = lcl_0
                lcl_0 = _slot_3_check[0]
                lcl_0 = prim__eq(lcl_0, False)
                if lcl_0:
                    lcl_0 = _slot_3_check
                else:
                    lcl_1 = _slot_3_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_3 = lcl_1
                    lcl_1 = prim__tk__id("quote )")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_4 = lcl_1
                    lcl_1 = prim__is__null(_slot_4)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote ) not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = prim__peekable(prim__tokens, 0)
                        if lcl_1:
                            # switch
                            lcl_2 = prim__peek(prim__tokens, 0)
                            lcl_2 = lcl_2.idint
                            if lcl_2 == prim__tk__id("quote unnamed_addr"):
                                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_2 = prim__mk__ast("FunctionHeader", lcl_2)
                                    _slot_local__1 = lcl_2
                                    lcl_2 = (True, _slot_local__1)
                                lcl_1 = lcl_2
                            elif lcl_2 == prim__tk__id("quote local_unnamed_addr"):
                                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_3 = prim__mk__ast("FunctionHeader", lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                            else:
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                lcl_3 = prim__mk__ast("FunctionHeader", lcl_2)
                                _slot_local__1 = lcl_3
                                lcl_2 = (True, _slot_local__1)
                                lcl_1 = lcl_2
                        else:
                            lcl_1 = (_off_2, "FunctionHeader got EOF")
                            lcl_2 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_2)
                            lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
    return lcl_0
def parse_GEPConstIndex(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote inrange"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_1_check = lcl_2
            lcl_2 = _slot_1_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_1_check
            else:
                lcl_3 = _slot_1_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_1 = lcl_3
                lcl_3 = parse_IntLit(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_2 = lcl_3
                    lcl_3 = (_slot_0, _slot_1, _slot_2)
                    lcl_3 = prim__mk__ast("GEPConstIndex", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i8"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_IntLit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("GEPConstIndex", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i64"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_IntLit(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("GEPConstIndex", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i32"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_IntLit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("GEPConstIndex", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i16"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_IntLit(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("GEPConstIndex", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i1"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_IntLit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("GEPConstIndex", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "GEPConstIndex lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "GEPConstIndex got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_GEPConstIndexList(prim__state, prim__tokens):
    lcl_0 = parse_GEPConstIndex(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("GEPConstIndexList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_GEPConstIndexList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_GEPExpr(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote getelementptr")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote getelementptr not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote inbounds"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_1 = prim__tk__id("quote (")
                lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                _slot_2 = lcl_1
                lcl_1 = prim__is__null(_slot_2)
                if lcl_1:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote ( not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                else:
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_3_check = lcl_2
                    lcl_2 = _slot_3_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_3_check
                    else:
                        lcl_3 = _slot_3_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__tk__id("quote ,")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_4 = lcl_3
                        lcl_3 = prim__is__null(_slot_4)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote , not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = parse_TypeConstant(prim__state, prim__tokens)
                            _slot_5_check = lcl_3
                            lcl_3 = _slot_5_check[0]
                            lcl_3 = prim__eq(lcl_3, False)
                            if lcl_3:
                                lcl_3 = _slot_5_check
                            else:
                                lcl_4 = _slot_5_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_5 = lcl_4
                                lcl_4 = prim__tokens.offset
                                _off_4 = lcl_4
                                lcl_4 = prim__peekable(prim__tokens, 0)
                                if lcl_4:
                                    # switch
                                    lcl_6 = prim__peek(prim__tokens, 0)
                                    lcl_6 = lcl_6.idint
                                    if lcl_6 == prim__tk__id("quote ,"):
                                        lcl_6 = prim__mv__forward(prim__tokens)
                                        _slot_6 = lcl_6
                                        lcl_6 = parse_GEPConstIndexList(prim__state, prim__tokens)
                                        _slot_7_check = lcl_6
                                        lcl_6 = _slot_7_check[0]
                                        lcl_6 = prim__eq(lcl_6, False)
                                        if lcl_6:
                                            lcl_6 = _slot_7_check
                                        else:
                                            lcl_7 = _slot_7_check[1]
                                            lcl_7 = prim__to__result(lcl_7)
                                            _slot_7 = lcl_7
                                            lcl_7 = (_slot_6, _slot_7)
                                            _slot_local__1 = lcl_7
                                            lcl_7 = prim__tk__id("quote )")
                                            lcl_7 = prim__match__tk(prim__tokens, lcl_7)
                                            _slot_8 = lcl_7
                                            lcl_7 = prim__is__null(_slot_8)
                                            if lcl_7:
                                                lcl_8 = prim__tokens.offset
                                                lcl_8 = (lcl_8, "quote ) not match")
                                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                                lcl_8 = prim__to__any(lcl_8)
                                                lcl_8 = (False, lcl_8)
                                                lcl_7 = lcl_8
                                            else:
                                                lcl_8 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1, _slot_8)
                                                lcl_8 = prim__mk__ast("GEPExpr", lcl_8)
                                                _slot_local__2 = lcl_8
                                                lcl_8 = (True, _slot_local__2)
                                                lcl_7 = lcl_8
                                            lcl_6 = lcl_7
                                        lcl_5 = lcl_6
                                    elif lcl_6 == prim__tk__id("quote )"):
                                        lcl_6 = prim__mv__forward(prim__tokens)
                                        _slot_6 = lcl_6
                                        lcl_7 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                        lcl_6 = prim__mk__ast("GEPExpr", lcl_7)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (True, _slot_local__1)
                                        lcl_5 = lcl_6
                                    else:
                                        lcl_6 = (_off_4, "GEPExpr lookahead failed")
                                        lcl_6 = prim__cons(lcl_6, prim__nil)
                                        lcl_6 = prim__to__any(lcl_6)
                                        lcl_6 = (False, lcl_6)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_off_4, "GEPExpr got EOF")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ("):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_2 = parse_Type(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_3 = _slot_2_check[0]
                lcl_4 = prim__eq(lcl_3, False)
                if lcl_4:
                    lcl_5 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_3 = lcl_1
                    lcl_1 = prim__is__null(_slot_3)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
                        _slot_4_check = lcl_1
                        lcl_1 = _slot_4_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_4_check
                        else:
                            lcl_2 = _slot_4_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_4 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_5 = lcl_4
                                    lcl_4 = parse_GEPConstIndexList(prim__state, prim__tokens)
                                    _slot_6_check = lcl_4
                                    lcl_4 = _slot_6_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_6_check
                                    else:
                                        lcl_5 = _slot_6_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_6 = lcl_5
                                        lcl_5 = (_slot_5, _slot_6)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = prim__tk__id("quote )")
                                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                                        _slot_7 = lcl_5
                                        lcl_5 = prim__is__null(_slot_7)
                                        if lcl_5:
                                            lcl_6 = prim__tokens.offset
                                            lcl_6 = (lcl_6, "quote ) not match")
                                            lcl_6 = prim__cons(lcl_6, prim__nil)
                                            lcl_6 = prim__to__any(lcl_6)
                                            lcl_6 = (False, lcl_6)
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1, _slot_7)
                                            lcl_6 = prim__mk__ast("GEPExpr", lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                elif lcl_4 == prim__tk__id("quote )"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_5 = lcl_4
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_4 = prim__mk__ast("GEPExpr", lcl_5)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, "GEPExpr lookahead failed")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPExpr got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_5 = lcl_1
                lcl_0 = lcl_5
            else:
                lcl_1 = (_off_1, "GEPExpr lookahead failed")
                lcl_2 = prim__cons(lcl_1, prim__nil)
                lcl_3 = prim__to__any(lcl_2)
                lcl_1 = (False, lcl_3)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "GEPExpr got EOF")
            lcl_1 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_1)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_GEPInst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote getelementptr")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote getelementptr not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote {"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote void"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote label"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote inbounds"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_2 = parse_Type(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_3 = _slot_2_check[0]
                lcl_1 = prim__eq(lcl_3, False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_3 = lcl_1
                    lcl_1 = prim__is__null(_slot_3)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_4_check = lcl_1
                        lcl_1 = _slot_4_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_4_check
                        else:
                            lcl_2 = _slot_4_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_4 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_5 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_6_check = lcl_4
                                    lcl_4 = _slot_6_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_6_check
                                    else:
                                        lcl_5 = _slot_6_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_6 = lcl_5
                                        lcl_5 = (_slot_5, _slot_6)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i8"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i64"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote i32"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i16"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote i1"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f64"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote f32"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ["):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ,")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote , not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote ,"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_4
                                    lcl_4 = _slot_5_check[0]
                                    lcl_4 = prim__eq(lcl_4, False)
                                    if lcl_4:
                                        lcl_4 = _slot_5_check
                                    else:
                                        lcl_5 = _slot_5_check[1]
                                        lcl_5 = prim__to__result(lcl_5)
                                        _slot_5 = lcl_5
                                        lcl_5 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                        _slot_local__2 = lcl_5
                                        lcl_5 = (True, _slot_local__2)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("GEPInst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "GEPInst got EOF")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__is__null(_slot_2)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote ,"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_5
                                    lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                    _slot_5_check = lcl_5
                                    lcl_5 = _slot_5_check[0]
                                    lcl_5 = prim__eq(lcl_5, False)
                                    if lcl_5:
                                        lcl_5 = _slot_5_check
                                    else:
                                        lcl_6 = _slot_5_check[1]
                                        lcl_6 = prim__to__result(lcl_6)
                                        _slot_5 = lcl_6
                                        lcl_6 = (_slot_4, _slot_5)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                        lcl_6 = prim__mk__ast("GEPInst", lcl_6)
                                        _slot_local__2 = lcl_6
                                        lcl_6 = (True, _slot_local__2)
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_5 = prim__mk__ast("GEPInst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "GEPInst got EOF")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "GEPInst lookahead failed")
                lcl_2 = prim__cons(lcl_1, prim__nil)
                lcl_3 = prim__to__any(lcl_2)
                lcl_4 = (False, lcl_3)
                lcl_0 = lcl_4
        else:
            lcl_0 = (_off_1, "GEPInst got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_Global(prim__state, prim__tokens):
    lcl_0 = parse_GlobalName(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = prim__tk__id("quote =")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, "quote = not match")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = prim__peekable(prim__tokens, 0)
            if lcl_0:
                # switch
                lcl_1 = prim__peek(prim__tokens, 0)
                lcl_1 = lcl_1.idint
                if lcl_1 == prim__tk__id("quote unnamed_addr"):
                    lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("Global", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif lcl_1 == prim__tk__id("quote local_unnamed_addr"):
                    lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("Global", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif lcl_1 == prim__tk__id("quote global"):
                    lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_2 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_2, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("Global", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif lcl_1 == prim__tk__id("quote external"):
                    lcl_1 = parse_GlobalDecl(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("Global", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif lcl_1 == prim__tk__id("quote extern_weak"):
                    lcl_1 = parse_GlobalDecl(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_2 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_2, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("Global", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif lcl_1 == prim__tk__id("quote constant"):
                    lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("Global", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, "Global lookahead failed")
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = prim__to__any(lcl_2)
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, "Global got EOF")
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = prim__to__any(lcl_0)
                lcl_0 = (False, lcl_0)
    return lcl_0
def parse_GlobalDecl(prim__state, prim__tokens):
    lcl_0 = parse_ExternLinkage(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_2 = prim__peek(prim__tokens, 0)
            lcl_2 = lcl_2.idint
            if lcl_2 == prim__tk__id("quote unnamed_addr"):
                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Immutable(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("GlobalDecl", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote local_unnamed_addr"):
                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_Immutable(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_3
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("GlobalDecl", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote global"):
                lcl_2 = parse_Immutable(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("GlobalDecl", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote constant"):
                lcl_2 = parse_Immutable(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("GlobalDecl", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, "GlobalDecl lookahead failed")
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = prim__to__any(lcl_3)
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, "GlobalDecl got EOF")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
    return lcl_0
def parse_GlobalDef(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote unnamed_addr"):
            lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Immutable(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = parse_Constant(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("GlobalDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote local_unnamed_addr"):
            lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Immutable(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = parse_Constant(prim__state, prim__tokens)
                        _slot_3_check = lcl_3
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("GlobalDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote global"):
            lcl_2 = parse_Immutable(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Constant(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast("GlobalDef", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote constant"):
            lcl_2 = parse_Immutable(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_3, False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = prim__to__result(lcl_3)
                    _slot_1 = lcl_3
                    lcl_3 = parse_Constant(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast("GlobalDef", lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "GlobalDef lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "GlobalDef got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_GlobalName(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("globalIdent")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "globalIdent not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("GlobalName", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_Immutable(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote global"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("Immutable", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote constant"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("Immutable", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Immutable lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Immutable got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_IndexList(prim__state, prim__tokens):
    lcl_0 = parse_IntLit(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("IndexList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_IndexList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_InsValExpr(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote insertvalue")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote insertvalue not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote (")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote ( not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = prim__tk__id("quote ,")
                lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                _slot_3 = lcl_2
                lcl_2 = prim__is__null(_slot_3)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote , not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = parse_TypeConstant(prim__state, prim__tokens)
                    _slot_4_check = lcl_2
                    lcl_2 = _slot_4_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_4_check
                    else:
                        lcl_3 = _slot_4_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_4 = lcl_3
                        lcl_3 = prim__tokens.offset
                        _off_3 = lcl_3
                        lcl_3 = prim__peekable(prim__tokens, 0)
                        if lcl_3:
                            # switch
                            lcl_5 = prim__peek(prim__tokens, 0)
                            lcl_5 = lcl_5.idint
                            if lcl_5 == prim__tk__id("quote ,"):
                                lcl_5 = prim__mv__forward(prim__tokens)
                                _slot_5 = lcl_5
                                lcl_5 = parse_IndexList(prim__state, prim__tokens)
                                _slot_6_check = lcl_5
                                lcl_5 = _slot_6_check[0]
                                lcl_5 = prim__eq(lcl_5, False)
                                if lcl_5:
                                    lcl_5 = _slot_6_check
                                else:
                                    lcl_6 = _slot_6_check[1]
                                    lcl_6 = prim__to__result(lcl_6)
                                    _slot_6 = lcl_6
                                    lcl_6 = (_slot_5, _slot_6)
                                    _slot_local__1 = lcl_6
                                    lcl_6 = prim__tk__id("quote )")
                                    lcl_6 = prim__match__tk(prim__tokens, lcl_6)
                                    _slot_7 = lcl_6
                                    lcl_6 = prim__is__null(_slot_7)
                                    if lcl_6:
                                        lcl_7 = prim__tokens.offset
                                        lcl_7 = (lcl_7, "quote ) not match")
                                        lcl_7 = prim__cons(lcl_7, prim__nil)
                                        lcl_7 = prim__to__any(lcl_7)
                                        lcl_7 = (False, lcl_7)
                                        lcl_6 = lcl_7
                                    else:
                                        lcl_7 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1, _slot_7)
                                        lcl_7 = prim__mk__ast("InsValExpr", lcl_7)
                                        _slot_local__2 = lcl_7
                                        lcl_7 = (True, _slot_local__2)
                                        lcl_6 = lcl_7
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            elif lcl_5 == prim__tk__id("quote )"):
                                lcl_5 = prim__mv__forward(prim__tokens)
                                _slot_5 = lcl_5
                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_5 = prim__mk__ast("InsValExpr", lcl_6)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_off_3, "InsValExpr lookahead failed")
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = prim__to__any(lcl_5)
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_off_3, "InsValExpr got EOF")
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = prim__to__any(lcl_4)
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_InsValInst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote insertvalue")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote insertvalue not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_TypeValue(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote ,")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote , not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = prim__tk__id("quote ,")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_4 = lcl_2
                    lcl_2 = prim__is__null(_slot_4)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote , not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_IndexList(prim__state, prim__tokens)
                        _slot_5_check = lcl_2
                        lcl_2 = _slot_5_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_5_check
                        else:
                            lcl_3 = _slot_5_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_5 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                            lcl_3 = prim__mk__ast("InsValInst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_InstructionList(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote store"):
            lcl_2 = parse_StoreInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("InstructionList", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_LocalName(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tk__id("quote =")
                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                _slot_1 = lcl_3
                lcl_3 = prim__is__null(_slot_1)
                if lcl_3:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, "quote = not match")
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_3)
                    lcl_3 = (False, lcl_3)
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    _slot_local__1 = lcl_3
                    lcl_3 = parse_ValueInstruction(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_local__1, _slot_2)
                        lcl_3 = prim__mk__ast("InstructionList", lcl_3)
                        _slot_local__2 = lcl_3
                        lcl_3 = (True, _slot_local__2)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "InstructionList lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "InstructionList got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_IntConst(prim__state, prim__tokens):
    lcl_0 = parse_IntLit(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("IntConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_IntLit(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("int")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "int not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("IntLit", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_IntType(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote i8"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("IntType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i64"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("IntType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i32"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("IntType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i16"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("IntType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i1"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("IntType", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "IntType lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "IntType got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_LabelType(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote label")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote label not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("LabelType", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_LocalName(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("localIdent")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "localIdent not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("LocalName", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_NamedType(prim__state, prim__tokens):
    lcl_0 = parse_LocalName(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("NamedType", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_NoneConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote none")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote none not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("NoneConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_NullConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote null")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote null not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("NullConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_OpaqueType(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote opaque")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote opaque not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("OpaqueType", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_OverflowFlags(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote nuw"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("OverflowFlags", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = lr_loop_OverflowFlags(_slot_local__1, prim__state, prim__tokens)
            lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nsw"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("OverflowFlags", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = lr_loop_OverflowFlags(_slot_local__1, prim__state, prim__tokens)
            lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "OverflowFlags lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "OverflowFlags got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Param(prim__state, prim__tokens):
    lcl_0 = parse_Type(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_2 = prim__peek(prim__tokens, 0)
            lcl_2 = lcl_2.idint
            if lcl_2 == prim__tk__id("str"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_2, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote zeroext"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote writeonly"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote swiftself"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote swifterror"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote sret"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote signext"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote returned"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote readonly"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote readnone"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote nonnull"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote nocapture"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote noalias"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote nest"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote inreg"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote inalloca"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote dereferenceable_or_null"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote dereferenceable"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote byval"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("quote align"):
                lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("localIdent"):
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = prim__eq(lcl_4, False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = prim__to__result(lcl_4)
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast("Param", lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast("Param", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, "Param got EOF")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif lcl_2 == prim__tk__id("localIdent"):
                lcl_2 = parse_LocalName(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = prim__eq(lcl_3, False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast("Param", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Param", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, "Param got EOF")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
    return lcl_0
def parse_ParamAttr(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("str"):
            lcl_2 = parse_StrLit(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote zeroext"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote writeonly"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote swiftself"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote swifterror"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sret"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote signext"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote returned"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote readonly"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote readnone"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nonnull"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nocapture"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote noalias"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote nest"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote inreg"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote inalloca"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote dereferenceable_or_null"):
            lcl_2 = parse_Dereferenceable(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ParamAttr", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote dereferenceable"):
            lcl_2 = parse_Dereferenceable(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote byval"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("ParamAttr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote align"):
            lcl_2 = parse_Alignment(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ParamAttr", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "ParamAttr lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "ParamAttr got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_ParamAttrList(prim__state, prim__tokens):
    lcl_0 = parse_ParamAttr(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("ParamAttrList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_ParamAttrList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_ParamAttrs(prim__state, prim__tokens):
    lcl_0 = parse_ParamAttrList(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("ParamAttrs", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_ParamList(prim__state, prim__tokens):
    lcl_0 = parse_Param(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("ParamList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_ParamList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_Params(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote {"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote void"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote label"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i8"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i64"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i32"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i16"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i1"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote f64"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote f32"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ["):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_4 = prim__peek(prim__tokens, 0)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote ,"):
                        lcl_4 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_4
                        lcl_4 = prim__tk__id("quote ...")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_5 = prim__tokens.offset
                            lcl_5 = (lcl_5, "quote ... not match")
                            lcl_5 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = prim__to__any(lcl_5)
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_local__1)
                            lcl_5 = prim__mk__ast("Params", lcl_5)
                            _slot_local__2 = lcl_5
                            lcl_5 = (True, _slot_local__2)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_slot_0,)
                        lcl_5 = prim__mk__ast("Params", lcl_4)
                        _slot_local__1 = lcl_5
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "Params got EOF")
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_4)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ..."):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("Params", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_ParamList(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 0)
                if lcl_3:
                    # switch
                    lcl_5 = prim__peek(prim__tokens, 0)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote ,"):
                        lcl_5 = prim__mv__forward(prim__tokens)
                        _slot_1 = lcl_5
                        lcl_5 = prim__tk__id("quote ...")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, "quote ... not match")
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = prim__to__any(lcl_6)
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast("Params", lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0,)
                        lcl_6 = prim__mk__ast("Params", lcl_5)
                        _slot_local__1 = lcl_6
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, "Params got EOF")
                    lcl_5 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = prim__to__any(lcl_5)
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Params lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Params got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_START(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("BOF")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "BOF not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_TopLevelEntity(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("EOF")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "EOF not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast("START", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_SepTypeValueList(prim__state, prim__tokens):
    lcl_0 = parse_TypeValue(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("SepTypeValueList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_SepTypeValueList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_SourceFilename(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote source_filename")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote source_filename not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote =")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote = not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_StrLit(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = prim__eq(lcl_1, False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_2 = lcl_2
                lcl_2 = (_slot_0, _slot_1, _slot_2)
                lcl_2 = prim__mk__ast("SourceFilename", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_StoreInst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote store")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote store not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote {"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote volatile"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_2 = parse_Type(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_3 = _slot_2_check[0]
                lcl_1 = prim__eq(lcl_3, False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_1 = _slot_3_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_4 = lcl_1
                        lcl_1 = prim__is__null(_slot_4)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_5_check = lcl_1
                            lcl_1 = _slot_5_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_5_check
                            else:
                                lcl_2 = _slot_5_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_5 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_6_check = lcl_2
                                lcl_2 = _slot_6_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_6_check
                                else:
                                    lcl_2 = _slot_6_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_6 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_7 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_8_check = lcl_4
                                            lcl_4 = _slot_8_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_8_check
                                            else:
                                                lcl_5 = _slot_8_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_8 = lcl_5
                                                lcl_5 = (_slot_7, _slot_8)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote void"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote label"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote i8"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i64"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote i32"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i16"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote i1"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f64"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("quote f32"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ["):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_4 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = prim__eq(lcl_1, False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = prim__to__result(lcl_1)
                        _slot_2 = lcl_1
                        lcl_1 = prim__tk__id("quote ,")
                        lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                        _slot_3 = lcl_1
                        lcl_1 = prim__is__null(_slot_3)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, "quote , not match")
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = prim__to__any(lcl_1)
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = prim__eq(lcl_1, False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = prim__to__result(lcl_2)
                                _slot_4 = lcl_2
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = prim__eq(lcl_2, False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = prim__to__result(lcl_2)
                                    _slot_5 = lcl_2
                                    lcl_2 = prim__tokens.offset
                                    _off_3 = lcl_2
                                    lcl_2 = prim__peekable(prim__tokens, 0)
                                    if lcl_2:
                                        # switch
                                        lcl_4 = prim__peek(prim__tokens, 0)
                                        lcl_4 = lcl_4.idint
                                        if lcl_4 == prim__tk__id("quote ,"):
                                            lcl_4 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_4
                                            lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_4
                                            lcl_4 = _slot_7_check[0]
                                            lcl_4 = prim__eq(lcl_4, False)
                                            if lcl_4:
                                                lcl_4 = _slot_7_check
                                            else:
                                                lcl_5 = _slot_7_check[1]
                                                lcl_5 = prim__to__result(lcl_5)
                                                _slot_7 = lcl_5
                                                lcl_5 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                                _slot_local__2 = lcl_5
                                                lcl_5 = (True, _slot_local__2)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_4 = prim__mk__ast("StoreInst", lcl_4)
                                            _slot_local__1 = lcl_4
                                            lcl_4 = (True, _slot_local__1)
                                            lcl_3 = lcl_4
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, "StoreInst got EOF")
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = prim__to__any(lcl_3)
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_4 = lcl_1
                lcl_0 = lcl_4
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_Type(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_3 = prim__eq(lcl_2, False)
                if lcl_3:
                    lcl_1 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_1 = lcl_2
                    lcl_2 = parse_Value(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = prim__eq(lcl_2, False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = prim__to__result(lcl_2)
                        _slot_2 = lcl_2
                        lcl_2 = prim__tk__id("quote ,")
                        lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                        _slot_3 = lcl_2
                        lcl_2 = prim__is__null(_slot_3)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, "quote , not match")
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = prim__to__any(lcl_2)
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = prim__eq(lcl_2, False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = prim__eq(lcl_3, False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = prim__to__result(lcl_3)
                                    _slot_5 = lcl_3
                                    lcl_3 = prim__tokens.offset
                                    _off_3 = lcl_3
                                    lcl_3 = prim__peekable(prim__tokens, 0)
                                    if lcl_3:
                                        # switch
                                        lcl_5 = prim__peek(prim__tokens, 0)
                                        lcl_5 = lcl_5.idint
                                        if lcl_5 == prim__tk__id("quote ,"):
                                            lcl_5 = prim__mv__forward(prim__tokens)
                                            _slot_6 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = prim__eq(lcl_5, False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = prim__to__result(lcl_6)
                                                _slot_7 = lcl_6
                                                lcl_6 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                lcl_6 = prim__mk__ast("StoreInst", lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                            lcl_5 = prim__mk__ast("StoreInst", lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, "StoreInst got EOF")
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = prim__to__any(lcl_4)
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "StoreInst lookahead failed")
                lcl_2 = prim__cons(lcl_1, prim__nil)
                lcl_3 = prim__to__any(lcl_2)
                lcl_4 = (False, lcl_3)
                lcl_0 = lcl_4
        else:
            lcl_0 = (_off_1, "StoreInst got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_StrLit(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("str")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "str not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("StrLit", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_StructConst(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote {"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__peekable(prim__tokens, 0)
            if lcl_2:
                # switch
                lcl_3 = prim__peek(prim__tokens, 0)
                lcl_3 = lcl_3.idint
                if lcl_3 == prim__tk__id("quote }"):
                    lcl_3 = prim__mv__forward(prim__tokens)
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast("StructConst", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote {"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote void"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote label"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i8"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i64"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i32"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i16"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote i1"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote f64"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote f32"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("quote ["):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                elif lcl_3 == prim__tk__id("localIdent"):
                    lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = prim__eq(lcl_3, False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = prim__to__result(lcl_3)
                        _slot_1 = lcl_3
                        lcl_3 = prim__tk__id("quote }")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_2 = lcl_3
                        lcl_3 = prim__is__null(_slot_2)
                        if lcl_3:
                            lcl_3 = prim__tokens.offset
                            lcl_3 = (lcl_3, "quote } not match")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                        else:
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast("StructConst", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, "StructConst lookahead failed")
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_3)
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
            else:
                lcl_2 = (_off_1, "StructConst got EOF")
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = prim__to__any(lcl_2)
                lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote <"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = prim__tk__id("quote {")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_1 = lcl_2
            lcl_2 = prim__is__null(_slot_1)
            if lcl_2:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, "quote { not match")
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = prim__to__any(lcl_2)
                lcl_2 = (False, lcl_2)
            else:
                lcl_2 = prim__tokens.offset
                _off_2 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 0)
                if lcl_2:
                    # switch
                    lcl_3 = prim__peek(prim__tokens, 0)
                    lcl_3 = lcl_3.idint
                    if lcl_3 == prim__tk__id("quote }"):
                        lcl_3 = prim__mv__forward(prim__tokens)
                        _slot_2 = lcl_3
                        lcl_3 = prim__tk__id("quote >")
                        lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                        _slot_3 = lcl_3
                        lcl_3 = prim__is__null(_slot_3)
                        if lcl_3:
                            lcl_4 = prim__tokens.offset
                            lcl_4 = (lcl_4, "quote > not match")
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = prim__to__any(lcl_4)
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_4 = prim__mk__ast("StructConst", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote {"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote void"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote label"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote i8"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote i64"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote i32"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote i16"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote i1"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote f64"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote f32"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("quote ["):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_3, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = prim__to__result(lcl_4)
                            _slot_2 = lcl_4
                            lcl_4 = prim__tk__id("quote }")
                            lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                            _slot_3 = lcl_4
                            lcl_4 = prim__is__null(_slot_3)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, "quote } not match")
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_4)
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = prim__tk__id("quote >")
                                lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                                _slot_4 = lcl_4
                                lcl_4 = prim__is__null(_slot_4)
                                if lcl_4:
                                    lcl_5 = prim__tokens.offset
                                    lcl_5 = (lcl_5, "quote > not match")
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = prim__to__any(lcl_5)
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_5 = prim__mk__ast("StructConst", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif lcl_3 == prim__tk__id("localIdent"):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = prim__eq(lcl_4, False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_2 = lcl_3
                            lcl_3 = prim__tk__id("quote }")
                            lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = prim__is__null(_slot_3)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, "quote } not match")
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_3)
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = prim__tk__id("quote >")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__is__null(_slot_4)
                                if lcl_3:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, "quote > not match")
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = prim__to__any(lcl_4)
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("StructConst", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_2, "StructConst lookahead failed")
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_3)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                else:
                    lcl_2 = (_off_2, "StructConst got EOF")
                    lcl_3 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_3)
                    lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "StructConst lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "StructConst got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_StructType(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote {")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote { not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote }"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_1 = (_slot_0, _slot_1)
                lcl_1 = prim__mk__ast("StructType", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote {"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote void"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote label"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i8"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i64"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i32"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i16"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote i1"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f64"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote f32"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("quote ["):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("localIdent"):
                lcl_1 = parse_TypeList(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_1 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote }")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote } not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = (_slot_0, _slot_1, _slot_2)
                        lcl_1 = prim__mk__ast("StructType", lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "StructType lookahead failed")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "StructType got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_Terminator(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ret")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote ret not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tk__id("quote void")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, "quote void not match")
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = prim__to__any(lcl_1)
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast("Terminator", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_TopLevelEntity(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote source_filename"):
            lcl_2 = parse_SourceFilename(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("TopLevelEntity", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote define"):
            lcl_2 = parse_FunctionDef(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("TopLevelEntity", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote declare"):
            lcl_2 = parse_FunctionDecl(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("TopLevelEntity", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_TypeDef(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("TopLevelEntity", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("globalIdent"):
            lcl_2 = parse_Global(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("TopLevelEntity", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "TopLevelEntity lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "TopLevelEntity got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Type(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote {"):
            lcl_2 = parse_StructType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote void"):
            lcl_2 = parse_VoidType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__1, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote label"):
            lcl_2 = parse_LabelType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i8"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i64"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i32"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i16"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote i1"):
            lcl_2 = parse_IntType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote f64"):
            lcl_2 = parse_FloatType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote f32"):
            lcl_2 = parse_FloatType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ["):
            lcl_2 = parse_ArrayType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_NamedType(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("FirstClassType", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Type", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Type lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Type got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_TypeConstList(prim__state, prim__tokens):
    lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("TypeConstList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_TypeConstList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_TypeConstant(prim__state, prim__tokens):
    lcl_0 = parse_Type(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = parse_Constant(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast("TypeConstant", lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_TypeDef(prim__state, prim__tokens):
    lcl_0 = parse_LocalName(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = prim__tk__id("quote =")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, "quote = not match")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tk__id("quote type")
            lcl_0 = prim__match__tk(prim__tokens, lcl_0)
            _slot_2 = lcl_0
            lcl_0 = prim__is__null(_slot_2)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote type not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = prim__tokens.offset
                _off_2 = lcl_1
                lcl_1 = prim__peekable(prim__tokens, 0)
                if lcl_1:
                    # switch
                    lcl_2 = prim__peek(prim__tokens, 0)
                    lcl_2 = lcl_2.idint
                    if lcl_2 == prim__tk__id("quote {"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote void"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote opaque"):
                        lcl_2 = parse_OpaqueType(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote label"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote i8"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote i64"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote i32"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote i16"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote i1"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote f64"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote f32"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote ["):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_3 = prim__mk__ast("TypeDef", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("localIdent"):
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_3 = _slot_3_check[0]
                        lcl_2 = prim__eq(lcl_3, False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_2 = prim__mk__ast("TypeDef", lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    else:
                        lcl_2 = (_off_2, "TypeDef lookahead failed")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                        lcl_1 = lcl_2
                else:
                    lcl_1 = (_off_2, "TypeDef got EOF")
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = prim__to__any(lcl_2)
                    lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
    return lcl_0
def parse_TypeList(prim__state, prim__tokens):
    lcl_0 = parse_Type(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("TypeList", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_TypeList(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_TypeValue(prim__state, prim__tokens):
    lcl_0 = parse_Type(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = parse_Value(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast("TypeValue", lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_UndefConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote undef")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote undef not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("UndefConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_UnnamedAddr(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote unnamed_addr"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("UnnamedAddr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote local_unnamed_addr"):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = (_slot_0,)
            lcl_2 = prim__mk__ast("UnnamedAddr", lcl_2)
            _slot_local__1 = lcl_2
            lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "UnnamedAddr lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "UnnamedAddr got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Value(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote {"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote zeroinitializer"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote undef"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote true"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote null"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote none"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote false"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote c"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote blockaddress"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote bitcast"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ["):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote <"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("localIdent"):
            lcl_2 = parse_LocalName(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("int"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("globalIdent"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Value", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("float"):
            lcl_2 = parse_Constant(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Value", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Value lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Value got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_ValueInstruction(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote xor"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote urem"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote udiv"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sub"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote srem"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote shl"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote sdiv"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote or"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote mul"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote lshr"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote insertvalue"):
            lcl_2 = parse_InsValInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote getelementptr"):
            lcl_2 = parse_GEPInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fsub"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote frem"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fmul"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fadd"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote extractvalue"):
            lcl_2 = parse_ExtValInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ashr"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote and"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("ValueInstruction", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote add"):
            lcl_2 = parse_BinInst(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("ValueInstruction", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "ValueInstruction lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "ValueInstruction got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_VoidType(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote void")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote void not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("VoidType", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_ZeroInitializerConst(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote zeroinitializer")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote zeroinitializer not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("ZeroInitializerConst", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_name(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("identifier")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "identifier not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("name", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
